AWSTemplateFormatVersion: 2010-09-09
Resources:

  SensitiveLambdaFunction:
    Type: AWS::Lambda::Function # Noncompliant {{Make sure missing "Log Groups" declaration is intended here.}}
    #     ^^^^^^^^^^^^^^^^^^^^^

  SensitiveOtherServerlessFunction:
    Type: AWS::Serverless::Function # Noncompliant
    #     ^^^^^^^^^^^^^^^^^^^^^^^^^

  SensitiveApiGateway:
    Type: AWS::ApiGatewayV2::Api # Noncompliant
    #     ^^^^^^^^^^^^^^^^^^^^^^

  SensitiveCodeBuildProject:
    Type: AWS::CodeBuild::Project # Noncompliant
    #     ^^^^^^^^^^^^^^^^^^^^^^^

  CompliantLambdaFunction:
    Type: AWS::Lambda::Function

  CompliantFunctionLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CompliantLambdaFunction}'

  CompliantServerlessFunction:
    Type: AWS::Serverless::Function

  CompliantServerlessFunctionLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CompliantServerlessFunction}'

  CompliantApiGateway:
    Type: AWS::ApiGatewayV2::Api

  CompliantApiGatewayLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CompliantApiGateway}'

  CompliantCodeBuildProject:
    Type: AWS::CodeBuild::Project

  CompliantCodeBuildProjectLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CompliantCodeBuildProject}'

  OtherCompliantCodeBuildProject:
    Type: AWS::CodeBuild::Project

  OtherCompliantCodeBuildProjectLogGroupFnSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: '/aws/lambda/${OtherCompliantCodeBuildProject}'

  NoRelevantResource:
    Type: AWS::S3::Bucket

  YetAnotherCompliantCodeBuildProject:
    Type: AWS::CodeBuild::Project

  CompliantCodeBuildProjectLogGroupRef:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref YetAnotherCompliantCodeBuildProject]]

  OneMoreCompliantCodeBuildProject:
    Type: AWS::CodeBuild::Project

  CompliantCodeBuildProjectLogGroupFnRef:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
          - '/'
          -
            - '/aws/lambda'
            - Ref: OneMoreCompliantCodeBuildProject

  CompliantLambdaFunctionWithFunctionName:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: my-lambda-function-name

  CompliantLambdaFunctionLogGroupWithFunctionName:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/my-lambda-function-name'

  SensitiveLambdaFunctionWithFunctionName:
    Type: AWS::Lambda::Function # Noncompliant
    Properties:
      FunctionName: my-sensitive-lambda-function-name

  SensitiveLambdaFunctionLogGroupWithMissingFunctionName:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: ''

  CompliantLambdaFunctionLogGroupWithRef:
    Type: AWS::Lambda::Function
    Properties:
      LoggingConfig:
        LogGroup: !Ref CompliantLambdaFunctionLogGroup

  CompliantLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/function"
      RetentionInDays: 90

  SensitiveLambdaFunctionLogGroupWithRefButNoLogGroupName:
    Type: AWS::Lambda::Function
    Properties:
      LoggingConfig:
        LogGroup: !Ref SensitiveLambdaFunctionLogGroupNoLogGroupName

  SensitiveLambdaFunctionLogGroupNoLogGroupName:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90

  CompliantServerlessFunctionLogGroupWithRef:
    Type: AWS::Serverless::Function
    Properties:
      LoggingConfig:
        LogGroup: !Ref CompliantServerlessFunctionLogGroup

  CompliantServerlessFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/serverless"
      RetentionInDays: 90

# The AWS::ApiGatewayV2::Api doesn't have LoggingConfig property
  SensitiveApiGatewayWithRef:
    Type: AWS::ApiGatewayV2::Api # Noncompliant
    Properties:
      LoggingConfig:
        LogGroup: !Ref SensitiveApiGatewayLogGroup

  SensitiveApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/apiGateway"
      RetentionInDays: 90

# The AWS::CodeBuild::Project doesn't have LoggingConfig property
  SensitiveCodeBuildProjectWithRef:
    Type: AWS::CodeBuild::Project # Noncompliant
    Properties:
      LoggingConfig:
        LogGroup: !Ref SensitiveCodeBuildProjectLogGroup

  SensitiveCodeBuildProjectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/codeBuild"
      RetentionInDays: 90

  CompliantCodeBuildProjectWithLogsConfigCloudWatchLogs:
    Type: AWS::CodeBuild::Project
    Properties:
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
          GroupName: "aws/codeBuild/project"

# The S3Logs doesn't define a LogGroupName or similar, let's assume that defining 'S3Logs' key is enough to not raise issue
  CompliantCodeBuildProjectWithLogsConfigS3Logs:
    Type: AWS::CodeBuild::Project
    Properties:
      LogsConfig:
        S3Logs:
          Status: "ENABLED"
          Location: "my-bucket/build-log"

  CompliantFunctionWithLogEvent:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        OtherEvent:
          Type: NoLogType
        CWLogEvent:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: MyCWLogGroup
            FilterPattern: My filter pattern

  SensitiveFunctionWithLogEventMissingLogGroupName:
    Type: AWS::Serverless::Function # Noncompliant
    Properties:
      Events:
        CWLogEvent:
          Type: CloudWatchLogs
          Properties:
            FilterPattern: My filter pattern

  CompliantCodeBuildProjectWithStringMatch:
    Type: AWS::CodeBuild::Project

  CompliantCodeBuildProjectWithStringMatchLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/foo/bar/CompliantCodeBuildProjectWithStringMatch'

  UnresolvedSubFunctionCall:
    Type: AWS::CodeBuild::Project # Noncompliant

  UnresolvedSubFunctionCallLogGroupSub:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - !GetAtt foo.bar.sub

  LogGroupWithNameMatchingFunction: # Log Group for the Lambda, this needs to be created before the Lambda auto-creates it.
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaName}'
      RetentionInDays: 7

  FunctionThatReliesOnCreatedLogGroup:
    Type: 'AWS::Serverless::Function'
    DependsOn:
      - LogGroupWithNameMatchingFunction # Log group needs to be created before function
    Properties:
      FunctionName: !Sub '${LambdaName}' # Function name is the same as the log group name