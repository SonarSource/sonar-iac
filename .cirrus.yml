env:

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  #Possible values for ARTIFACTORY_DEPLOY_REPO: sonarsource-private-qa, sonarsource-public-qa
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash
  # Allows to run builds for the 50 last commits in a branch:
  CIRRUS_CLONE_DEPTH: 1
  GRADLE_USER_HOME: ${CIRRUS_WORKING_DIR}/.gradle
  GRADLE_COMMON_FLAGS: --console plain --no-daemon
  GO_VERSION: 1.21.1
  PROTOC_VERSION: 25.0

  ORG_GRADLE_PROJECT_signingKey: VAULT[development/kv/data/sign data.key]
  ORG_GRADLE_PROJECT_signingPassword: VAULT[development/kv/data/sign data.passphrase]
  ORG_GRADLE_PROJECT_signingKeyId: 0x7DCD4258


build_secrets: &BUILD_SECRETS
  SIGN_KEY: VAULT[development/kv/data/sign data.key]
  PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
  # analysis on SonarCloud
  SONAR_HOST_URL: https://sonarcloud.io
  SONAR_TOKEN: VAULT[development/kv/data/sonarcloud data.token]

ws_scan_secrets: &WS_SCAN_SECRETS
  WS_APIKEY: VAULT[development/kv/data/mend data.apikey]

promote_secrets: &PROMOTE_SECRETS
  ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
  GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
  # burgr notification
  BURGR_URL: VAULT[development/kv/data/burgr data.url]
  BURGR_USERNAME: VAULT[development/kv/data/burgr data.cirrus_username]
  BURGR_PASSWORD: VAULT[development/kv/data/burgr data.cirrus_password]

# ----------------------------------------------
# -------------CONTAINER DEFINITIONS------------
# ----------------------------------------------

linux_image_template: &LINUX_IMAGE
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default
  use_in_memory_disk: true

linux_image_with_gcc_template: &LINUX_IMAGE_WITH_GCC
  dockerfile: .cirrus/Dockerfile
  docker_arguments:
    CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
    GO_VERSION: ${GO_VERSION}
    PROTOC_VERSION: ${PROTOC_VERSION}
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  builder_role: cirrus-builder
  builder_image: docker-builder-v*
  builder_instance_type: t3.small
  builder_subnet_id: ${CIRRUS_AWS_SUBNET}
  region: eu-central-1
  namespace: default
  use_in_memory_disk: true

linux_1_cpu_2G_template: &LINUX_1_CPU_2G
  eks_container:
    <<: *LINUX_IMAGE
    cpu: 1
    memory: 2G

linux_4_cpu_8G_java_17_template: &LINUX_4_CPU_8G_JAVA_17
  eks_container:
    <<: *LINUX_IMAGE
    image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
    cpu: 4
    memory: 8G

win_vm_definition: &WINDOWS_VM_DEFINITION
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    image: base-windows-jdk17-v*
    platform: windows
    region: eu-central-1
    type: t3.xlarge
    subnet_id: ${CIRRUS_AWS_SUBNET}
    use_ssd: true

# ----------------------------------------------
# ------------------FILTERS---------------------
# ----------------------------------------------

only_sonarsource_qa: &ONLY_IF_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" &&
    ($CIRRUS_PR != "" || $CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

only_main_branches: &ONLY_MAIN_BRANCHES
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" &&
    ($CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BRANCH =~ "branch-.*")

qa_task_filter_template: &QA_TASK_FILTER
  depends_on:
    - build
  <<: *ONLY_IF_SONARSOURCE_QA

setup_gradle_cache_template: &SETUP_GRADLE_CACHE
  gradle_cache:
    folder: .gradle/caches
    fingerprint_script: git rev-parse HEAD
  create_gradle_directory_script:
    - mkdir -p "${CIRRUS_WORKING_DIR}/.gradle"

cleanup_gradle_cache_script_template: &CLEANUP_GRADLE_CACHE_SCRIPT
  cleanup_gradle_script:
    - /usr/bin/find "${CIRRUS_WORKING_DIR}/.gradle/caches" -type d -name "8.*" -prune -maxdepth 1 -exec rm -rf {} \;
    - rm -rf "${CIRRUS_WORKING_DIR}/.gradle/caches/journal-1/"

store_profile_report_template: &STORE_PROFILE_REPORT
  on_success:
    profile_report_artifacts:
      path: "build/reports/profile/profile-*.html"

# ----------------------------------------------
# -------------------TASKS----------------------
# ----------------------------------------------

build_task:
  eks_container:
    <<: *LINUX_IMAGE_WITH_GCC
    cpu: 3.5
    memory: 7G
  <<: *SETUP_GRADLE_CACHE
  env:
    <<: *BUILD_SECRETS
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
    GO_CROSS_COMPILE: '1'
  build_script:
    - source cirrus-env BUILD
    - source .cirrus/use-gradle-wrapper.sh
    - go version
    - regular_gradle_build_deploy_analyze --profile
  <<: *STORE_PROFILE_REPORT
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

qa_os_win_task:
  <<: *QA_TASK_FILTER
  <<: *WINDOWS_VM_DEFINITION
  <<: *SETUP_GRADLE_CACHE
  _lib:
    # For windows, refresh the path env variable, particularly useful after an installation with choco (RefreshEnv.cmd cannot be used in this context)
    - &refreshpath eval $(powershell -NonInteractive -Command 'write("export PATH=`"" + ([Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [Environment]::GetEnvironmentVariable("PATH","User")).replace("\","/").replace("C:","/c").replace(";",":") + ":`$PATH`"")')
  build_script:
    - choco install golang --version ${GO_VERSION}
    - choco install protoc --version ${PROTOC_VERSION}.0
    - *refreshpath
    - source cirrus-env CI
    - ./gradlew ${GRADLE_COMMON_FLAGS} test --profile
  <<: *STORE_PROFILE_REPORT

sca_scan_task:
  depends_on:
    - build
  <<: *SETUP_GRADLE_CACHE
  <<: *ONLY_MAIN_BRANCHES
  eks_container:
    <<: *LINUX_IMAGE_WITH_GCC
    cpu: 4
    memory: 8G
  env:
    <<: *WS_SCAN_SECRETS
  whitesource_script:
    - source cirrus-env QA
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version $BUILD_NUMBER
    - GRADLE_OPTS="-Xmx64m -Dorg.gradle.jvmargs='-Xmx3G' -Dorg.gradle.daemon=false" ./gradlew ${GRADLE_COMMON_FLAGS} :iac-common:processResources -Pkotlin.compiler.execution.strategy=in-process --profile
    - source ws_scan.sh -d "${PWD},${PWD}/sonar-helm-for-iac"
  allow_failures: "true"
  always:
    ws_artifacts:
      path: "whitesource/**/*"
  <<: *STORE_PROFILE_REPORT
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

qa_plugin_task:
  <<: *QA_TASK_FILTER
  <<: *LINUX_4_CPU_8G_JAVA_17
  <<: *SETUP_GRADLE_CACHE
  env:
    matrix:
      - SQ_VERSION: LATEST_RELEASE
      - SQ_VERSION: DEV
  submodules_script:
    - git submodule update --init
  plugin_script:
    - source cirrus-env QA
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version $BUILD_NUMBER
    - ./gradlew ${GRADLE_COMMON_FLAGS} -Dsonar.runtimeVersion=${SQ_VERSION} :its:plugin:integrationTest --profile
  <<: *STORE_PROFILE_REPORT
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

qa_ruling_task:
  <<: *QA_TASK_FILTER
  <<: *LINUX_4_CPU_8G_JAVA_17
  <<: *SETUP_GRADLE_CACHE
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version $BUILD_NUMBER
    - ./gradlew ${GRADLE_COMMON_FLAGS} -Dsonar.runtimeVersion=LATEST_RELEASE :its:ruling:integrationTest --profile
  <<: *STORE_PROFILE_REPORT
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

promote_task:
  depends_on:
    - build
    - qa_ruling
    - qa_plugin
  <<: *ONLY_IF_SONARSOURCE_QA
  <<: *LINUX_1_CPU_2G
  env:
    <<: *PROMOTE_SECRETS
    #artifacts that will have downloadable links in burgr
    ARTIFACTS: com.sonarsource.iac:sonar-iac-plugin:jar
  script:
    - source cirrus-env PROMOTE
    - cirrus_jfrog_promote multi
    - burgr-notify-promotion
