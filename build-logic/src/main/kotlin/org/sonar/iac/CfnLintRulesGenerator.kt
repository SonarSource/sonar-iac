package org.sonar.iac

data class Rule(
    val id: String,
    val title: String,
    val url: String,
    val description: String,
    val tags: List<String>,
    val type: String,
    val severity: String? = null,
    val attribute: String,
    val softwareQuality: String,
    val qualityImpact: String,
)

/**
 * Convert a rule to a JSON string that is to be included into `rules.json`.
 *
 * Note: url ends with `#<id>` to allow direct linking to the rule in the documentation. Even though there are no HTML anchors, there is an invisible
 * link generated by Github with an attribute `name="user-content-<id>"` that can be used as an anchor.
 */
fun Rule.asJson(margin: Int): String {
    return """
        {
          "key": "$id",
          "name": "$title",
          "url": "$url",
          "tags": ${tags.takeIf { it.isNotEmpty() }?.joinToString(prefix = "[", postfix = "]", separator = ",") { "\"$it\"" } ?: "[]"},
          "description": "$description",
          "constantDebtMinutes": 5,
          "type": "$type",
          ${severity?.let { """"severity": "$it",""" } ?: "" }
          "code": {
            "attribute": "$attribute",
            "impacts": {
                "$softwareQuality": "$qualityImpact"
            }
          }
        }
    """.trimIndent()
        .lineSequence()
        .filterNot { it.isBlank() }
        .joinToString(separator = "\n") { "|${" ".repeat(margin)}$it" }
}

object CfnLintRulesGenerator {

    private const val DESCRIPTION_PREFIX =
        "This issue is raised by the rule [%s] from \\\"AWS CloudFormation Linter\\\" (aka cfn-lint). This is not an issue raised by Sonar analyzers.<br/>" +
            "<br/>" +
            "AWS CloudFormation Linter Message: %s"
    private const val RULE_URL = "https://github.com/aws-cloudformation/cfn-lint/blob/main/docs/rules.md#%s"

    /**
     * Extract rules from the Markdown table in the [list of rules](https://github.com/aws-cloudformation/cfn-lint/blob/main/docs/rules.md#rules-1)
     */
    fun extractRules(input: String): List<Rule> {
        val tableRows = input.lineSequence()
            .dropWhile { it != "## Rules" }
            .dropWhile { !it.startsWith("|") }
            // drop table header and columns formatting line
            .drop(2)
            .takeWhile { it.startsWith("|") }
        return tableRows.map(::extractRule).toList().plusElement(fallbackRule)
    }

    private fun extractRule(line: String): Rule {
        val columns = line.split("|").map { it.trim() }
        // IDs also contain links: `E0000<a ...></a>`
        val id = columns[1].trimStart('[').takeWhile { it != '<' }
        val type = when {
            id.startsWith("E") -> "BUG"
            else -> "CODE_SMELL"
        }
        val severity = when {
            id.startsWith("I") -> "INFO"
            else -> "MAJOR"
        }
        val tags = columns[6].split(",")
            .map { it.trim().trim('`') }
            .filterNot { it.isBlank() }
            // Plugin API requires tags to match `^[a-z0-9\+#\-\.]+$`
            .map { it.replace(" ", "-").replace("_", "-").toCamelCase() }
        val attribute = when {
            type == "BUG" -> "LOGICAL"
            else -> "CONVENTIONAL"
        }
        val softwareQuality = when {
            type == "BUG" -> "RELIABILITY"
            else -> "MAINTAINABILITY"
        }
        val qualitySeverity = when {
            severity == "INFO" -> "LOW"
            else -> "MEDIUM"
        }
        return Rule(
            id,
            columns[2],
            RULE_URL.format(id),
            DESCRIPTION_PREFIX.format(id, columns[3]),
            tags,
            type,
            severity,
            attribute,
            softwareQuality,
            qualitySeverity
        )
    }

    private val fallbackRule = Rule(
        id = "cfn-lint.fallback",
        title = "Cfn-lint Rule",
        url = RULE_URL.format(""),
        description = DESCRIPTION_PREFIX.format(
            "cfn-lint.fallback",
            "This reporting may be triggered by a custom cfn-lint rule or by a default cfn-lint rule that has not yet been added to the Sonar IaC analyzer."
        ),
        tags = listOf("cfn-lint"),
        type = "CODE_SMELL",
        severity = "MAJOR",
        attribute = "CONVENTIONAL",
        softwareQuality = "MAINTAINABILITY",
        qualityImpact = "MEDIUM"
    )

    private fun String.toCamelCase() = replace("[a-z][A-Z]".toRegex()) { it.value.first() + "-" + it.value.last().lowercase() }
}
