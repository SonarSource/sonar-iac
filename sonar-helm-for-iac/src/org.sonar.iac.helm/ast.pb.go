// SonarQube IaC Plugin
// Copyright (C) 2021-2024 SonarSource SA
// mailto:info AT sonarsource DOT com
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the Sonar Source-Available License Version 1, as published by SonarSource SA.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the Sonar Source-Available License for more details.
//
// You should have received a copy of the Sonar Source-Available License
// along with this program; if not, see https://sonarsource.com/license/ssal/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.2
// source: ast.proto

package org_sonar_iac_helm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeType int32

const (
	NodeType_NodeUnknown    NodeType = 0
	NodeType_NodeText       NodeType = 1
	NodeType_NodeAction     NodeType = 2
	NodeType_NodeBool       NodeType = 3
	NodeType_NodeChain      NodeType = 4
	NodeType_NodeCommand    NodeType = 5
	NodeType_NodeDot        NodeType = 6
	NodeType_nodeElse       NodeType = 7
	NodeType_nodeEnd        NodeType = 8
	NodeType_NodeField      NodeType = 9
	NodeType_NodeIdentifier NodeType = 10
	NodeType_NodeIf         NodeType = 11
	NodeType_NodeList       NodeType = 12
	NodeType_NodeNil        NodeType = 13
	NodeType_NodeNumber     NodeType = 14
	NodeType_NodePipe       NodeType = 15
	NodeType_NodeRange      NodeType = 16
	NodeType_NodeString     NodeType = 17
	NodeType_NodeTemplate   NodeType = 18
	NodeType_NodeVariable   NodeType = 19
	NodeType_NodeWith       NodeType = 20
	NodeType_NodeComment    NodeType = 21
	NodeType_NodeBreak      NodeType = 22
	NodeType_NodeContinue   NodeType = 23
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0:  "NodeUnknown",
		1:  "NodeText",
		2:  "NodeAction",
		3:  "NodeBool",
		4:  "NodeChain",
		5:  "NodeCommand",
		6:  "NodeDot",
		7:  "nodeElse",
		8:  "nodeEnd",
		9:  "NodeField",
		10: "NodeIdentifier",
		11: "NodeIf",
		12: "NodeList",
		13: "NodeNil",
		14: "NodeNumber",
		15: "NodePipe",
		16: "NodeRange",
		17: "NodeString",
		18: "NodeTemplate",
		19: "NodeVariable",
		20: "NodeWith",
		21: "NodeComment",
		22: "NodeBreak",
		23: "NodeContinue",
	}
	NodeType_value = map[string]int32{
		"NodeUnknown":    0,
		"NodeText":       1,
		"NodeAction":     2,
		"NodeBool":       3,
		"NodeChain":      4,
		"NodeCommand":    5,
		"NodeDot":        6,
		"nodeElse":       7,
		"nodeEnd":        8,
		"NodeField":      9,
		"NodeIdentifier": 10,
		"NodeIf":         11,
		"NodeList":       12,
		"NodeNil":        13,
		"NodeNumber":     14,
		"NodePipe":       15,
		"NodeRange":      16,
		"NodeString":     17,
		"NodeTemplate":   18,
		"NodeVariable":   19,
		"NodeWith":       20,
		"NodeComment":    21,
		"NodeBreak":      22,
		"NodeContinue":   23,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_ast_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{0}
}

// A Node is an element in the parse tree.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_ast_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *Node) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Node) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

// ActionNode holds an action (something bounded by delimiters).
// Control actions have their own nodes; ActionNode represents simple
// ones such as field evaluations and parenthesized pipelines.
type ActionNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// The pipeline in the action.
	Pipe *PipeNode `protobuf:"bytes,4,opt,name=pipe,proto3,oneof" json:"pipe,omitempty"`
}

func (x *ActionNode) Reset() {
	*x = ActionNode{}
	mi := &file_ast_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionNode) ProtoMessage() {}

func (x *ActionNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionNode.ProtoReflect.Descriptor instead.
func (*ActionNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{1}
}

func (x *ActionNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *ActionNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *ActionNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ActionNode) GetPipe() *PipeNode {
	if x != nil {
		return x.Pipe
	}
	return nil
}

// BoolNode holds a boolean constant.
type BoolNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	True     bool     `protobuf:"varint,4,opt,name=true,proto3" json:"true,omitempty"`
}

func (x *BoolNode) Reset() {
	*x = BoolNode{}
	mi := &file_ast_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolNode) ProtoMessage() {}

func (x *BoolNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolNode.ProtoReflect.Descriptor instead.
func (*BoolNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{2}
}

func (x *BoolNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *BoolNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *BoolNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *BoolNode) GetTrue() bool {
	if x != nil {
		return x.True
	}
	return false
}

// BranchNode is the common representation of if, range, and with.
type BranchNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// The pipeline to be evaluated.
	Pipe *PipeNode `protobuf:"bytes,4,opt,name=pipe,proto3,oneof" json:"pipe,omitempty"`
	// What to execute if the value is non-empty.
	List *ListNode `protobuf:"bytes,5,opt,name=list,proto3,oneof" json:"list,omitempty"`
	// What to execute if the value is empty (nil if absent).
	ElseList *ListNode `protobuf:"bytes,6,opt,name=elseList,proto3,oneof" json:"elseList,omitempty"`
}

func (x *BranchNode) Reset() {
	*x = BranchNode{}
	mi := &file_ast_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchNode) ProtoMessage() {}

func (x *BranchNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchNode.ProtoReflect.Descriptor instead.
func (*BranchNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{3}
}

func (x *BranchNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *BranchNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *BranchNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *BranchNode) GetPipe() *PipeNode {
	if x != nil {
		return x.Pipe
	}
	return nil
}

func (x *BranchNode) GetList() *ListNode {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *BranchNode) GetElseList() *ListNode {
	if x != nil {
		return x.ElseList
	}
	return nil
}

// BreakNode represents a {{break}} action.
type BreakNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Line     *int64   `protobuf:"varint,4,opt,name=line,proto3,oneof" json:"line,omitempty"`
}

func (x *BreakNode) Reset() {
	*x = BreakNode{}
	mi := &file_ast_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BreakNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakNode) ProtoMessage() {}

func (x *BreakNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakNode.ProtoReflect.Descriptor instead.
func (*BreakNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{4}
}

func (x *BreakNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *BreakNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *BreakNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *BreakNode) GetLine() int64 {
	if x != nil && x.Line != nil {
		return *x.Line
	}
	return 0
}

// ChainNode holds a term followed by a chain of field accesses (identifier starting with '.').
// The names may be chained ('.x.y'). The periods are dropped from each ident.
// In newer versions of Go (at least 1.21), doesn't appear in the AST in common cases.
type ChainNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType   `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64      `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64      `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Node     *anypb.Any `protobuf:"bytes,4,opt,name=node,proto3,oneof" json:"node,omitempty"`
	// The identifiers in lexical order.
	Field []string `protobuf:"bytes,5,rep,name=field,proto3" json:"field,omitempty"`
}

func (x *ChainNode) Reset() {
	*x = ChainNode{}
	mi := &file_ast_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainNode) ProtoMessage() {}

func (x *ChainNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainNode.ProtoReflect.Descriptor instead.
func (*ChainNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{5}
}

func (x *ChainNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *ChainNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *ChainNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ChainNode) GetNode() *anypb.Any {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ChainNode) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

// CommandNode holds a command (a pipeline inside an evaluating action).
type CommandNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// Arguments in lexical order: Identifier, field, or constant. Will be one of the node types declared here.
	Args []*anypb.Any `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *CommandNode) Reset() {
	*x = CommandNode{}
	mi := &file_ast_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandNode) ProtoMessage() {}

func (x *CommandNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandNode.ProtoReflect.Descriptor instead.
func (*CommandNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{6}
}

func (x *CommandNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *CommandNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *CommandNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *CommandNode) GetArgs() []*anypb.Any {
	if x != nil {
		return x.Args
	}
	return nil
}

// CommentNode holds a comment.
// Insertion of these nodes into the AST is toggleable by the parser mode and is enabled by default in `SonarSource/go`.
type CommentNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Text     *string  `protobuf:"bytes,4,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

func (x *CommentNode) Reset() {
	*x = CommentNode{}
	mi := &file_ast_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentNode) ProtoMessage() {}

func (x *CommentNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentNode.ProtoReflect.Descriptor instead.
func (*CommentNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{7}
}

func (x *CommentNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *CommentNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *CommentNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *CommentNode) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

// ContinueNode represents a {{continue}} action.
type ContinueNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Line     *int64   `protobuf:"varint,4,opt,name=line,proto3,oneof" json:"line,omitempty"`
}

func (x *ContinueNode) Reset() {
	*x = ContinueNode{}
	mi := &file_ast_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContinueNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueNode) ProtoMessage() {}

func (x *ContinueNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueNode.ProtoReflect.Descriptor instead.
func (*ContinueNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{8}
}

func (x *ContinueNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *ContinueNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *ContinueNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ContinueNode) GetLine() int64 {
	if x != nil && x.Line != nil {
		return *x.Line
	}
	return 0
}

// DotNode holds the special identifier '.'.
type DotNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *DotNode) Reset() {
	*x = DotNode{}
	mi := &file_ast_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DotNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DotNode) ProtoMessage() {}

func (x *DotNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DotNode.ProtoReflect.Descriptor instead.
func (*DotNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{9}
}

func (x *DotNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *DotNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *DotNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

// FieldNode holds a field (identifier starting with '.').
// The names may be chained ('.x.y').
// The period is dropped from each ident.
type FieldNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// The identifiers in lexical order.
	Ident []string `protobuf:"bytes,4,rep,name=ident,proto3" json:"ident,omitempty"`
}

func (x *FieldNode) Reset() {
	*x = FieldNode{}
	mi := &file_ast_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldNode) ProtoMessage() {}

func (x *FieldNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldNode.ProtoReflect.Descriptor instead.
func (*FieldNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{10}
}

func (x *FieldNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *FieldNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *FieldNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *FieldNode) GetIdent() []string {
	if x != nil {
		return x.Ident
	}
	return nil
}

// IdentifierNode holds an identifier.
type IdentifierNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// The identifier's name.
	Ident *string `protobuf:"bytes,4,opt,name=ident,proto3,oneof" json:"ident,omitempty"`
}

func (x *IdentifierNode) Reset() {
	*x = IdentifierNode{}
	mi := &file_ast_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentifierNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierNode) ProtoMessage() {}

func (x *IdentifierNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierNode.ProtoReflect.Descriptor instead.
func (*IdentifierNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{11}
}

func (x *IdentifierNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *IdentifierNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *IdentifierNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *IdentifierNode) GetIdent() string {
	if x != nil && x.Ident != nil {
		return *x.Ident
	}
	return ""
}

// IfNode represents an {{if}} action and its commands.
type IfNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType   NodeType    `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos        int64       `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length     int64       `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	BranchNode *BranchNode `protobuf:"bytes,4,opt,name=branchNode,proto3,oneof" json:"branchNode,omitempty"`
}

func (x *IfNode) Reset() {
	*x = IfNode{}
	mi := &file_ast_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IfNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfNode) ProtoMessage() {}

func (x *IfNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfNode.ProtoReflect.Descriptor instead.
func (*IfNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{12}
}

func (x *IfNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *IfNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *IfNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *IfNode) GetBranchNode() *BranchNode {
	if x != nil {
		return x.BranchNode
	}
	return nil
}

// ListNode holds a sequence of nodes.
type ListNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType     `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64        `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64        `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Nodes    []*anypb.Any `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ListNode) Reset() {
	*x = ListNode{}
	mi := &file_ast_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNode) ProtoMessage() {}

func (x *ListNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNode.ProtoReflect.Descriptor instead.
func (*ListNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{13}
}

func (x *ListNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *ListNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *ListNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ListNode) GetNodes() []*anypb.Any {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// NilNode holds the special identifier 'nil' representing an untyped nil constant.
type NilNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *NilNode) Reset() {
	*x = NilNode{}
	mi := &file_ast_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NilNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NilNode) ProtoMessage() {}

func (x *NilNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NilNode.ProtoReflect.Descriptor instead.
func (*NilNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{14}
}

func (x *NilNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *NilNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *NilNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

// NumberNode holds a number: signed or unsigned integer, float, or complex.
// The value is parsed and stored under all the types that can represent the value.
// This simulates in a small amount of code the behavior of Go's ideal constants.
type NumberNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// Number has an integral value.
	IsInt *bool `protobuf:"varint,4,opt,name=isInt,proto3,oneof" json:"isInt,omitempty"`
	// Number has an unsigned integral value.
	IsUint *bool `protobuf:"varint,5,opt,name=isUint,proto3,oneof" json:"isUint,omitempty"`
	// Number has a floating-point value.
	IsFloat *bool `protobuf:"varint,6,opt,name=isFloat,proto3,oneof" json:"isFloat,omitempty"`
	// Number is complex.
	IsComplex *bool `protobuf:"varint,7,opt,name=isComplex,proto3,oneof" json:"isComplex,omitempty"`
	// The signed integer value.
	Int64 *int64 `protobuf:"varint,8,opt,name=int64,proto3,oneof" json:"int64,omitempty"`
	// The unsigned integer value.
	Uint64 *uint64 `protobuf:"varint,9,opt,name=uint64,proto3,oneof" json:"uint64,omitempty"`
	// The floating-point value.
	Float64 *float64 `protobuf:"fixed64,10,opt,name=float64,proto3,oneof" json:"float64,omitempty"`
	// The complex value. There are no complex numbers in protobuf, so this is a string; should be converted if needed.
	Complex128 *string `protobuf:"bytes,11,opt,name=complex128,proto3,oneof" json:"complex128,omitempty"`
	// The original textual representation from the input.
	Text *string `protobuf:"bytes,12,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

func (x *NumberNode) Reset() {
	*x = NumberNode{}
	mi := &file_ast_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumberNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberNode) ProtoMessage() {}

func (x *NumberNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberNode.ProtoReflect.Descriptor instead.
func (*NumberNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{15}
}

func (x *NumberNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *NumberNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *NumberNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *NumberNode) GetIsInt() bool {
	if x != nil && x.IsInt != nil {
		return *x.IsInt
	}
	return false
}

func (x *NumberNode) GetIsUint() bool {
	if x != nil && x.IsUint != nil {
		return *x.IsUint
	}
	return false
}

func (x *NumberNode) GetIsFloat() bool {
	if x != nil && x.IsFloat != nil {
		return *x.IsFloat
	}
	return false
}

func (x *NumberNode) GetIsComplex() bool {
	if x != nil && x.IsComplex != nil {
		return *x.IsComplex
	}
	return false
}

func (x *NumberNode) GetInt64() int64 {
	if x != nil && x.Int64 != nil {
		return *x.Int64
	}
	return 0
}

func (x *NumberNode) GetUint64() uint64 {
	if x != nil && x.Uint64 != nil {
		return *x.Uint64
	}
	return 0
}

func (x *NumberNode) GetFloat64() float64 {
	if x != nil && x.Float64 != nil {
		return *x.Float64
	}
	return 0
}

func (x *NumberNode) GetComplex128() string {
	if x != nil && x.Complex128 != nil {
		return *x.Complex128
	}
	return ""
}

func (x *NumberNode) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

// PipeNode holds a pipeline with optional declaration
type PipeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// The variables are being assigned, not declared.
	IsAssign *bool `protobuf:"varint,4,opt,name=isAssign,proto3,oneof" json:"isAssign,omitempty"`
	// Variables in lexical order.
	Decl []*VariableNode `protobuf:"bytes,5,rep,name=decl,proto3" json:"decl,omitempty"`
	// The commands in lexical order.
	Cmds []*CommandNode `protobuf:"bytes,6,rep,name=cmds,proto3" json:"cmds,omitempty"`
}

func (x *PipeNode) Reset() {
	*x = PipeNode{}
	mi := &file_ast_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipeNode) ProtoMessage() {}

func (x *PipeNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipeNode.ProtoReflect.Descriptor instead.
func (*PipeNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{16}
}

func (x *PipeNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *PipeNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *PipeNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *PipeNode) GetIsAssign() bool {
	if x != nil && x.IsAssign != nil {
		return *x.IsAssign
	}
	return false
}

func (x *PipeNode) GetDecl() []*VariableNode {
	if x != nil {
		return x.Decl
	}
	return nil
}

func (x *PipeNode) GetCmds() []*CommandNode {
	if x != nil {
		return x.Cmds
	}
	return nil
}

// RangeNode represents a {{range}} action and its commands.
type RangeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType   NodeType    `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos        int64       `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length     int64       `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	BranchNode *BranchNode `protobuf:"bytes,4,opt,name=branchNode,proto3,oneof" json:"branchNode,omitempty"`
}

func (x *RangeNode) Reset() {
	*x = RangeNode{}
	mi := &file_ast_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RangeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeNode) ProtoMessage() {}

func (x *RangeNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeNode.ProtoReflect.Descriptor instead.
func (*RangeNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{17}
}

func (x *RangeNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *RangeNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *RangeNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *RangeNode) GetBranchNode() *BranchNode {
	if x != nil {
		return x.BranchNode
	}
	return nil
}

// StringNode holds a string constant. The value has been "unquoted".
type StringNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// The original text of the string, with quotes.
	Quoted *string `protobuf:"bytes,4,opt,name=quoted,proto3,oneof" json:"quoted,omitempty"`
	// The string, after quote processing.
	Text *string `protobuf:"bytes,5,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

func (x *StringNode) Reset() {
	*x = StringNode{}
	mi := &file_ast_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringNode) ProtoMessage() {}

func (x *StringNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringNode.ProtoReflect.Descriptor instead.
func (*StringNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{18}
}

func (x *StringNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *StringNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *StringNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *StringNode) GetQuoted() string {
	if x != nil && x.Quoted != nil {
		return *x.Quoted
	}
	return ""
}

func (x *StringNode) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

// TemplateNode represents a {{template}} action.
type TemplateNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// The name of the template (unquoted).
	Name *string `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The command to evaluate as dot for the template.
	Pipe *PipeNode `protobuf:"bytes,5,opt,name=pipe,proto3,oneof" json:"pipe,omitempty"`
}

func (x *TemplateNode) Reset() {
	*x = TemplateNode{}
	mi := &file_ast_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateNode) ProtoMessage() {}

func (x *TemplateNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateNode.ProtoReflect.Descriptor instead.
func (*TemplateNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{19}
}

func (x *TemplateNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *TemplateNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *TemplateNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *TemplateNode) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TemplateNode) GetPipe() *PipeNode {
	if x != nil {
		return x.Pipe
	}
	return nil
}

// TextNode holds plain text.
type TextNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Text     []byte   `protobuf:"bytes,4,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

func (x *TextNode) Reset() {
	*x = TextNode{}
	mi := &file_ast_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextNode) ProtoMessage() {}

func (x *TextNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextNode.ProtoReflect.Descriptor instead.
func (*TextNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{20}
}

func (x *TextNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *TextNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *TextNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *TextNode) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

// Tree is the representation of a single parsed template.
type Tree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the template represented by the tree.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// name of the top-level template during parsing, for error messages.
	ParseName *string `protobuf:"bytes,2,opt,name=parseName,proto3,oneof" json:"parseName,omitempty"`
	// top-level root of the tree.
	Root *ListNode `protobuf:"bytes,3,opt,name=root,proto3,oneof" json:"root,omitempty"`
	Mode *uint64   `protobuf:"varint,4,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
}

func (x *Tree) Reset() {
	*x = Tree{}
	mi := &file_ast_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{21}
}

func (x *Tree) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Tree) GetParseName() string {
	if x != nil && x.ParseName != nil {
		return *x.ParseName
	}
	return ""
}

func (x *Tree) GetRoot() *ListNode {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *Tree) GetMode() uint64 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

// VariableNode holds a list of variable names, possibly with chained field
// accesses. The dollar sign is part of the (first) name.
type VariableNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos      int64    `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length   int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// Variable name and fields in lexical order.
	Ident []string `protobuf:"bytes,4,rep,name=ident,proto3" json:"ident,omitempty"`
}

func (x *VariableNode) Reset() {
	*x = VariableNode{}
	mi := &file_ast_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VariableNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableNode) ProtoMessage() {}

func (x *VariableNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableNode.ProtoReflect.Descriptor instead.
func (*VariableNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{22}
}

func (x *VariableNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *VariableNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *VariableNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *VariableNode) GetIdent() []string {
	if x != nil {
		return x.Ident
	}
	return nil
}

// WithNode represents a {{with}} action and its commands.
type WithNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType   NodeType    `protobuf:"varint,1,opt,name=nodeType,proto3,enum=org.sonar.iac.helm.protobuf.NodeType" json:"nodeType,omitempty"`
	Pos        int64       `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Length     int64       `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	BranchNode *BranchNode `protobuf:"bytes,4,opt,name=branchNode,proto3,oneof" json:"branchNode,omitempty"`
}

func (x *WithNode) Reset() {
	*x = WithNode{}
	mi := &file_ast_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithNode) ProtoMessage() {}

func (x *WithNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithNode.ProtoReflect.Descriptor instead.
func (*WithNode) Descriptor() ([]byte, []int) {
	return file_ast_proto_rawDescGZIP(), []int{23}
}

func (x *WithNode) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeUnknown
}

func (x *WithNode) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *WithNode) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *WithNode) GetBranchNode() *BranchNode {
	if x != nil {
		return x.BranchNode
	}
	return nil
}

var File_ast_proto protoreflect.FileDescriptor

var file_ast_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6f, 0x72, 0x67,
	0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x04, 0x70, 0x69, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69,
	0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x22, 0x8b, 0x01,
	0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x72, 0x75, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x0a,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x04, 0x70, 0x69, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61,
	0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x70, 0x69, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61,
	0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x08, 0x65, 0x6c, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x02, 0x52, 0x08, 0x65, 0x6c, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6c, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9a,
	0x01, 0x0a, 0x09, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e,
	0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x76, 0x0a, 0x07, 0x44, 0x6f,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f,
	0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x22, 0x8e, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69,
	0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73,
	0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x06, 0x49, 0x66, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61,
	0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x4c, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72,
	0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xa3, 0x01,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x07, 0x4e, 0x69, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xf0, 0x03, 0x0a, 0x0a,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x73, 0x49, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x69, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x07, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x31, 0x32, 0x38, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x31, 0x32, 0x38, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x73, 0x49, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x69, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x31, 0x32, 0x38, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa2,
	0x02, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x65, 0x63,
	0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f,
	0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6c, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6d, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e,
	0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6d, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x22, 0xd5, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e,
	0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4c,
	0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69,
	0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0a,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72,
	0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x04, 0x70, 0x69, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e,
	0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x01, 0x52,
	0x04, 0x70, 0x69, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x08, 0x54,
	0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x91, 0x01,
	0x0a, 0x0c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x22, 0xd4, 0x01, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x0a, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e,
	0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x2a, 0xfa, 0x02, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x6f, 0x74, 0x10, 0x06, 0x12,
	0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x6c, 0x73, 0x65, 0x10, 0x07, 0x12, 0x0b, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x66, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x4e,
	0x69, 0x6c, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x69, 0x70, 0x65,
	0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10,
	0x11, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x10, 0x17, 0x42, 0x33, 0x0a, 0x1b, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e,
	0x61, 0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x50, 0x01, 0x5a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x6f, 0x6e, 0x61,
	0x72, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ast_proto_rawDescOnce sync.Once
	file_ast_proto_rawDescData = file_ast_proto_rawDesc
)

func file_ast_proto_rawDescGZIP() []byte {
	file_ast_proto_rawDescOnce.Do(func() {
		file_ast_proto_rawDescData = protoimpl.X.CompressGZIP(file_ast_proto_rawDescData)
	})
	return file_ast_proto_rawDescData
}

var file_ast_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ast_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_ast_proto_goTypes = []any{
	(NodeType)(0),          // 0: org.sonar.iac.helm.protobuf.NodeType
	(*Node)(nil),           // 1: org.sonar.iac.helm.protobuf.Node
	(*ActionNode)(nil),     // 2: org.sonar.iac.helm.protobuf.ActionNode
	(*BoolNode)(nil),       // 3: org.sonar.iac.helm.protobuf.BoolNode
	(*BranchNode)(nil),     // 4: org.sonar.iac.helm.protobuf.BranchNode
	(*BreakNode)(nil),      // 5: org.sonar.iac.helm.protobuf.BreakNode
	(*ChainNode)(nil),      // 6: org.sonar.iac.helm.protobuf.ChainNode
	(*CommandNode)(nil),    // 7: org.sonar.iac.helm.protobuf.CommandNode
	(*CommentNode)(nil),    // 8: org.sonar.iac.helm.protobuf.CommentNode
	(*ContinueNode)(nil),   // 9: org.sonar.iac.helm.protobuf.ContinueNode
	(*DotNode)(nil),        // 10: org.sonar.iac.helm.protobuf.DotNode
	(*FieldNode)(nil),      // 11: org.sonar.iac.helm.protobuf.FieldNode
	(*IdentifierNode)(nil), // 12: org.sonar.iac.helm.protobuf.IdentifierNode
	(*IfNode)(nil),         // 13: org.sonar.iac.helm.protobuf.IfNode
	(*ListNode)(nil),       // 14: org.sonar.iac.helm.protobuf.ListNode
	(*NilNode)(nil),        // 15: org.sonar.iac.helm.protobuf.NilNode
	(*NumberNode)(nil),     // 16: org.sonar.iac.helm.protobuf.NumberNode
	(*PipeNode)(nil),       // 17: org.sonar.iac.helm.protobuf.PipeNode
	(*RangeNode)(nil),      // 18: org.sonar.iac.helm.protobuf.RangeNode
	(*StringNode)(nil),     // 19: org.sonar.iac.helm.protobuf.StringNode
	(*TemplateNode)(nil),   // 20: org.sonar.iac.helm.protobuf.TemplateNode
	(*TextNode)(nil),       // 21: org.sonar.iac.helm.protobuf.TextNode
	(*Tree)(nil),           // 22: org.sonar.iac.helm.protobuf.Tree
	(*VariableNode)(nil),   // 23: org.sonar.iac.helm.protobuf.VariableNode
	(*WithNode)(nil),       // 24: org.sonar.iac.helm.protobuf.WithNode
	(*anypb.Any)(nil),      // 25: google.protobuf.Any
}
var file_ast_proto_depIdxs = []int32{
	0,  // 0: org.sonar.iac.helm.protobuf.Node.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 1: org.sonar.iac.helm.protobuf.ActionNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	17, // 2: org.sonar.iac.helm.protobuf.ActionNode.pipe:type_name -> org.sonar.iac.helm.protobuf.PipeNode
	0,  // 3: org.sonar.iac.helm.protobuf.BoolNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 4: org.sonar.iac.helm.protobuf.BranchNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	17, // 5: org.sonar.iac.helm.protobuf.BranchNode.pipe:type_name -> org.sonar.iac.helm.protobuf.PipeNode
	14, // 6: org.sonar.iac.helm.protobuf.BranchNode.list:type_name -> org.sonar.iac.helm.protobuf.ListNode
	14, // 7: org.sonar.iac.helm.protobuf.BranchNode.elseList:type_name -> org.sonar.iac.helm.protobuf.ListNode
	0,  // 8: org.sonar.iac.helm.protobuf.BreakNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 9: org.sonar.iac.helm.protobuf.ChainNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	25, // 10: org.sonar.iac.helm.protobuf.ChainNode.node:type_name -> google.protobuf.Any
	0,  // 11: org.sonar.iac.helm.protobuf.CommandNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	25, // 12: org.sonar.iac.helm.protobuf.CommandNode.args:type_name -> google.protobuf.Any
	0,  // 13: org.sonar.iac.helm.protobuf.CommentNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 14: org.sonar.iac.helm.protobuf.ContinueNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 15: org.sonar.iac.helm.protobuf.DotNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 16: org.sonar.iac.helm.protobuf.FieldNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 17: org.sonar.iac.helm.protobuf.IdentifierNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 18: org.sonar.iac.helm.protobuf.IfNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	4,  // 19: org.sonar.iac.helm.protobuf.IfNode.branchNode:type_name -> org.sonar.iac.helm.protobuf.BranchNode
	0,  // 20: org.sonar.iac.helm.protobuf.ListNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	25, // 21: org.sonar.iac.helm.protobuf.ListNode.nodes:type_name -> google.protobuf.Any
	0,  // 22: org.sonar.iac.helm.protobuf.NilNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 23: org.sonar.iac.helm.protobuf.NumberNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 24: org.sonar.iac.helm.protobuf.PipeNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	23, // 25: org.sonar.iac.helm.protobuf.PipeNode.decl:type_name -> org.sonar.iac.helm.protobuf.VariableNode
	7,  // 26: org.sonar.iac.helm.protobuf.PipeNode.cmds:type_name -> org.sonar.iac.helm.protobuf.CommandNode
	0,  // 27: org.sonar.iac.helm.protobuf.RangeNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	4,  // 28: org.sonar.iac.helm.protobuf.RangeNode.branchNode:type_name -> org.sonar.iac.helm.protobuf.BranchNode
	0,  // 29: org.sonar.iac.helm.protobuf.StringNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 30: org.sonar.iac.helm.protobuf.TemplateNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	17, // 31: org.sonar.iac.helm.protobuf.TemplateNode.pipe:type_name -> org.sonar.iac.helm.protobuf.PipeNode
	0,  // 32: org.sonar.iac.helm.protobuf.TextNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	14, // 33: org.sonar.iac.helm.protobuf.Tree.root:type_name -> org.sonar.iac.helm.protobuf.ListNode
	0,  // 34: org.sonar.iac.helm.protobuf.VariableNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	0,  // 35: org.sonar.iac.helm.protobuf.WithNode.nodeType:type_name -> org.sonar.iac.helm.protobuf.NodeType
	4,  // 36: org.sonar.iac.helm.protobuf.WithNode.branchNode:type_name -> org.sonar.iac.helm.protobuf.BranchNode
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_ast_proto_init() }
func file_ast_proto_init() {
	if File_ast_proto != nil {
		return
	}
	file_ast_proto_msgTypes[1].OneofWrappers = []any{}
	file_ast_proto_msgTypes[3].OneofWrappers = []any{}
	file_ast_proto_msgTypes[4].OneofWrappers = []any{}
	file_ast_proto_msgTypes[5].OneofWrappers = []any{}
	file_ast_proto_msgTypes[7].OneofWrappers = []any{}
	file_ast_proto_msgTypes[8].OneofWrappers = []any{}
	file_ast_proto_msgTypes[11].OneofWrappers = []any{}
	file_ast_proto_msgTypes[12].OneofWrappers = []any{}
	file_ast_proto_msgTypes[15].OneofWrappers = []any{}
	file_ast_proto_msgTypes[16].OneofWrappers = []any{}
	file_ast_proto_msgTypes[17].OneofWrappers = []any{}
	file_ast_proto_msgTypes[18].OneofWrappers = []any{}
	file_ast_proto_msgTypes[19].OneofWrappers = []any{}
	file_ast_proto_msgTypes[20].OneofWrappers = []any{}
	file_ast_proto_msgTypes[21].OneofWrappers = []any{}
	file_ast_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ast_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ast_proto_goTypes,
		DependencyIndexes: file_ast_proto_depIdxs,
		EnumInfos:         file_ast_proto_enumTypes,
		MessageInfos:      file_ast_proto_msgTypes,
	}.Build()
	File_ast_proto = out.File
	file_ast_proto_rawDesc = nil
	file_ast_proto_goTypes = nil
	file_ast_proto_depIdxs = nil
}
